// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250223164612_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Domain.Entities.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FoundingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialImpactDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SummaryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("Domain.Entities.BusinessCampaign", b =>
                {
                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.HasKey("BusinessId", "CampaignId");

                    b.HasIndex("CampaignId");

                    b.ToTable("BusinessCampaigns");
                });

            modelBuilder.Entity("Domain.Entities.BusinessCategory", b =>
                {
                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("BusinessId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BusinessCategories");
                });

            modelBuilder.Entity("Domain.Entities.BusinessContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("ContactType")
                        .HasColumnType("int");

                    b.Property<string>("ContactValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<bool>("Preferred")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessContacts");
                });

            modelBuilder.Entity("Domain.Entities.BusinessHighlightFeature", b =>
                {
                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("HighlightFeatureId")
                        .HasColumnType("int");

                    b.HasKey("BusinessId", "HighlightFeatureId");

                    b.HasIndex("HighlightFeatureId");

                    b.ToTable("BusinessHighlightFeatures");
                });

            modelBuilder.Entity("Domain.Entities.BusinessMarketingChannel", b =>
                {
                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("MarketingChannelId")
                        .HasColumnType("int");

                    b.HasKey("BusinessId", "MarketingChannelId");

                    b.HasIndex("MarketingChannelId");

                    b.ToTable("BusinessMarketingChannels");
                });

            modelBuilder.Entity("Domain.Entities.BusinessMarketplace", b =>
                {
                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("MarketplaceId")
                        .HasColumnType("int");

                    b.HasKey("BusinessId", "MarketplaceId");

                    b.HasIndex("MarketplaceId");

                    b.ToTable("BusinessMarketplaces");
                });

            modelBuilder.Entity("Domain.Entities.BusinessShippingCompany", b =>
                {
                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("ShippingCompanyId")
                        .HasColumnType("int");

                    b.HasKey("BusinessId", "ShippingCompanyId");

                    b.HasIndex("ShippingCompanyId");

                    b.ToTable("BusinessShippingCompanies");
                });

            modelBuilder.Entity("Domain.Entities.BusinessSpecialCertification", b =>
                {
                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialCertificationId")
                        .HasColumnType("int");

                    b.HasKey("BusinessId", "SpecialCertificationId");

                    b.HasIndex("SpecialCertificationId");

                    b.ToTable("BusinessSpecialCertifications");
                });

            modelBuilder.Entity("Domain.Entities.BusinessTag", b =>
                {
                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("BusinessId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BusinessTags");
                });

            modelBuilder.Entity("Domain.Entities.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Entities.HighlightFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HighlightFeatures");
                });

            modelBuilder.Entity("Domain.Entities.MarketingChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MarketingChannels");
                });

            modelBuilder.Entity("Domain.Entities.Marketplace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Marketplaces");
                });

            modelBuilder.Entity("Domain.Entities.ShippingCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShippingCompanies");
                });

            modelBuilder.Entity("Domain.Entities.SpecialCertification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SpecialCertifications");
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.UserFavoriteBusiness", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BusinessId");

                    b.HasIndex("BusinessId");

                    b.ToTable("UserFavoriteBusinesses");
                });

            modelBuilder.Entity("Domain.Entities.Branch", b =>
                {
                    b.HasOne("Domain.Entities.Business", "Business")
                        .WithMany("Branches")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Domain.Entities.BusinessCampaign", b =>
                {
                    b.HasOne("Domain.Entities.Business", "Business")
                        .WithMany("BusinessCampaigns")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Campaign", "Campaign")
                        .WithMany("BusinessCampaigns")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Domain.Entities.BusinessCategory", b =>
                {
                    b.HasOne("Domain.Entities.Business", "Business")
                        .WithMany("BusinessCategories")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("BusinessCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.BusinessContact", b =>
                {
                    b.HasOne("Domain.Entities.Business", "Business")
                        .WithMany("Contacts")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Domain.Entities.BusinessHighlightFeature", b =>
                {
                    b.HasOne("Domain.Entities.Business", "Business")
                        .WithMany("BusinessHighlightFeatures")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.HighlightFeature", "HighlightFeature")
                        .WithMany("BusinessCampaigns")
                        .HasForeignKey("HighlightFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("HighlightFeature");
                });

            modelBuilder.Entity("Domain.Entities.BusinessMarketingChannel", b =>
                {
                    b.HasOne("Domain.Entities.Business", "Business")
                        .WithMany("BusinessMarketingChannels")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MarketingChannel", "MarketingChannel")
                        .WithMany("BusinessMarketingChannels")
                        .HasForeignKey("MarketingChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("MarketingChannel");
                });

            modelBuilder.Entity("Domain.Entities.BusinessMarketplace", b =>
                {
                    b.HasOne("Domain.Entities.Business", "Business")
                        .WithMany("BusinessMarketplaces")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Marketplace", "Marketplace")
                        .WithMany("BusinessMarketplaces")
                        .HasForeignKey("MarketplaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Marketplace");
                });

            modelBuilder.Entity("Domain.Entities.BusinessShippingCompany", b =>
                {
                    b.HasOne("Domain.Entities.Business", "Business")
                        .WithMany("BusinessShippingCompanies")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ShippingCompany", "ShippingCompany")
                        .WithMany("BusinessShippingCompanies")
                        .HasForeignKey("ShippingCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("ShippingCompany");
                });

            modelBuilder.Entity("Domain.Entities.BusinessSpecialCertification", b =>
                {
                    b.HasOne("Domain.Entities.Business", "Business")
                        .WithMany("BusinessSpecialCertifications")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SpecialCertification", "SpecialCertification")
                        .WithMany("BusinessSpecialCertifications")
                        .HasForeignKey("SpecialCertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("SpecialCertification");
                });

            modelBuilder.Entity("Domain.Entities.BusinessTag", b =>
                {
                    b.HasOne("Domain.Entities.Business", "Business")
                        .WithMany("BusinessTags")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tag", "Tag")
                        .WithMany("BusinessTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Entities.UserFavoriteBusiness", b =>
                {
                    b.HasOne("Domain.Entities.Business", "Business")
                        .WithMany("UserFavoriteBusinesses")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserFavoriteBusinesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Business", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("BusinessCampaigns");

                    b.Navigation("BusinessCategories");

                    b.Navigation("BusinessHighlightFeatures");

                    b.Navigation("BusinessMarketingChannels");

                    b.Navigation("BusinessMarketplaces");

                    b.Navigation("BusinessShippingCompanies");

                    b.Navigation("BusinessSpecialCertifications");

                    b.Navigation("BusinessTags");

                    b.Navigation("Contacts");

                    b.Navigation("UserFavoriteBusinesses");
                });

            modelBuilder.Entity("Domain.Entities.Campaign", b =>
                {
                    b.Navigation("BusinessCampaigns");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("BusinessCategories");
                });

            modelBuilder.Entity("Domain.Entities.HighlightFeature", b =>
                {
                    b.Navigation("BusinessCampaigns");
                });

            modelBuilder.Entity("Domain.Entities.MarketingChannel", b =>
                {
                    b.Navigation("BusinessMarketingChannels");
                });

            modelBuilder.Entity("Domain.Entities.Marketplace", b =>
                {
                    b.Navigation("BusinessMarketplaces");
                });

            modelBuilder.Entity("Domain.Entities.ShippingCompany", b =>
                {
                    b.Navigation("BusinessShippingCompanies");
                });

            modelBuilder.Entity("Domain.Entities.SpecialCertification", b =>
                {
                    b.Navigation("BusinessSpecialCertifications");
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Navigation("BusinessTags");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("UserFavoriteBusinesses");
                });
#pragma warning restore 612, 618
        }
    }
}
